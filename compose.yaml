
services:

  cloud_sql_proxy:
    image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.15.2
    command: 
      - waterdatainitiative-271000:us-west3:nmwdiproduction
      - --address=0.0.0.0
    networks:
      - dagster_network

  # This service runs the gRPC server that loads your user code, in both dagster-webserver
  # and dagster-daemon. By setting DAGSTER_CURRENT_IMAGE to its own image, we tell the
  # run launcher to use this same image when launching runs in a new container as well.
  # Multiple containers like this can be deployed separately - each just needs to run on
  # its own port, and have its own entry in the workspace.yaml file that's loaded by the
  # webserver.
  aquaduct_pipelines:
    build:
      context: .
      dockerfile: ./pipelines/Dockerfile
    container_name: aquaduct_pipelines
    image: aquaduct_pipelines_image
    pull_policy: never
    restart: always
    networks:
      - dagster_network
    environment:
      DAGSTER_CURRENT_IMAGE: 'aquaduct_pipelines_image'
      DAGSTER_POSTGRES_USER: ${PG_USER}
      DAGSTER_POSTGRES_PASSWORD: ${PG_PASSWORD}
      DAGSTER_POSTGRES_DB: 'dagster'


  # This service runs dagster-webserver, which loads your user code from the user code container.
  # Since our instance uses the QueuedRunCoordinator, any runs submitted from the webserver will be put on
  # a queue and later dequeued and launched by dagster-daemon.
  dagster_webserver:
    build:
      context: .
      dockerfile: ./Dockerfile_dagster
    entrypoint:
      - dagster-webserver
      - -h
      - '0.0.0.0'
      - -p
      - '3000'
      - -w
      - workspace.yaml
    container_name: dagster_webserver
    expose:
      - '3000'
    ports:
      - '3000:3000'
    volumes: # Make docker client accessible so we can terminate containers from the webserver
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
    networks:
      - dagster_network
    environment:
      DAGSTER_POSTGRES_USER: ${PG_USER}
      DAGSTER_POSTGRES_PASSWORD: ${PG_PASSWORD}
      DAGSTER_POSTGRES_DB: 'dagster'
      DAGSTER_POSTGRES_HOSTNAME: cloud_sql_proxy
    depends_on:
      cloud_sql_proxy:
        condition: service_started
      aquaduct_pipelines:
        condition: service_started


  # This service runs the dagster-daemon process, which is responsible for taking runs
  # off of the queue and launching them, as well as creating runs from schedules or sensors.
  dagster_daemon:
    build:
      context: .
      dockerfile: ./Dockerfile_dagster
    entrypoint:
      - dagster-daemon
      - run
    container_name: dagster_daemon
    restart: on-failure
    volumes: # Make docker client accessible so we can launch containers using host docker
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
    networks:
      - dagster_network
    environment:
      DAGSTER_POSTGRES_USER: ${PG_USER}
      DAGSTER_POSTGRES_PASSWORD: ${PG_PASSWORD}
      DAGSTER_POSTGRES_DB: 'dagster'
      DAGSTER_POSTGRES_HOSTNAME: cloud_sql_proxy
    depends_on:
      cloud_sql_proxy:
        condition: service_started
      aquaduct_pipelines:
        condition: service_started

networks:
  dagster_network:
    driver: bridge
    name: dagster_network